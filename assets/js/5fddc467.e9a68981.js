"use strict";(self.webpackChunksuperbench_website=self.webpackChunksuperbench_website||[]).push([[5934],{5680:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>g});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),o=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=o(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=o(n),g=a,d=p["".concat(u,".").concat(g)]||p[g]||c[g]||i;return n?r.createElement(d,l(l({ref:t},m),{},{components:n})):r.createElement(d,l({ref:t},m))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=p;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var o=2;o<i;o++)l[o]=n[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5204:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>u,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>m});var r=n(8168),a=n(8587),i=(n(6540),n(5680)),l=["components"],s={id:"result-summary"},u="Result Summary",o={unversionedId:"user-tutorial/result-summary",id:"user-tutorial/result-summary",isDocsHomePage:!1,title:"Result Summary",description:"Introduction",source:"@site/../docs/user-tutorial/result-summary.md",sourceDirName:"user-tutorial",slug:"/user-tutorial/result-summary",permalink:"/superbenchmark/docs/user-tutorial/result-summary",editUrl:"https://github.com/microsoft/superbenchmark/edit/main/website/../docs/user-tutorial/result-summary.md",version:"current",frontMatter:{id:"result-summary"},sidebar:"docs",previous:{title:"Data Diagnosis",permalink:"/superbenchmark/docs/user-tutorial/data-diagnosis"},next:{title:"Baseline Generation",permalink:"/superbenchmark/docs/user-tutorial/baseline-generation"}},m=[{value:"Introduction",id:"introduction",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Input",id:"input",children:[{value:"Rule File",id:"rule-file",children:[]}]},{value:"Output",id:"output",children:[]}],c={toc:m};function p(e){var t=e.components,n=(0,a.A)(e,l);return(0,i.yg)("wrapper",(0,r.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"result-summary"},"Result Summary"),(0,i.yg)("h2",{id:"introduction"},"Introduction"),(0,i.yg)("p",null,"This tool is to generate a readable summary report based on the raw benchmark results of single or multiple machines."),(0,i.yg)("h2",{id:"usage"},"Usage"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("a",{parentName:"p",href:"/superbenchmark/docs/getting-started/installation"},"Install SuperBench")," on the local machine.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Prepare the raw data and rule file on the local machine.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Generate the result summary automatically using ",(0,i.yg)("inlineCode",{parentName:"p"},"sb result summary")," command. The detailed command can be found from ",(0,i.yg)("a",{parentName:"p",href:"/superbenchmark/docs/cli"},"SuperBench CLI"),"."),(0,i.yg)("pre",{parentName:"li"},(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"sb result summary --data-file ./results-summary.jsonl --rule-file ./rule.yaml --output-file-format md --output-dir ${output-dir}\n"))),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Find the output result file named 'results-summary.md' under ${output_dir}."))),(0,i.yg)("h2",{id:"input"},"Input"),(0,i.yg)("p",null,"The input includes 2 files:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Raw Data"),": jsonl file including multiple nodes' results automatically generated by SuperBench runner.")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Tips")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("p",{parentName:"div"},"Raw data file can be found at ${output-dir}/results-summary.jsonl after each successful run."))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Rule File"),": It uses YAML format and defines how to generate the result summary including how to classify the metrics and what statistical methods (P50, mean, etc.) are applied.")),(0,i.yg)("h3",{id:"rule-file"},"Rule File"),(0,i.yg)("p",null,"This section describes how to write rules in ",(0,i.yg)("strong",{parentName:"p"},"rule file"),"."),(0,i.yg)("p",null,"The convention is the same as ",(0,i.yg)("a",{parentName:"p",href:"/superbenchmark/docs/superbench-config"},"SuperBench Config File"),", please view it first."),(0,i.yg)("p",null,"Here is an overview of the rule file structure:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml",metastring:'title="Scheme"',title:'"Scheme"'},"version: string\nsuperbench:\n  rules:\n    ${rule_name}:\n      statistics:\n        - ${statistic_name}\n      categories: string\n      aggregate: (optional)[bool|string]\n      metrics:\n        - ${benchmark_name}/regex\n        - ${benchmark_name}/regex\n")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml",metastring:'title="Example"',title:'"Example"'},"# SuperBench rules\nversion: v0.12\nsuperbench:\n  rules:\n    kernel_launch:\n      statistics:\n        - mean\n        - p90\n        - min\n        - max\n      aggregate: True\n      categories: KernelLaunch\n      metrics:\n        - kernel-launch/event_time\n        - kernel-launch/wall_time\n    nccl:\n      statistics: mean\n      categories: NCCL\n      metrics:\n        - nccl-bw/allreduce_8388608_busbw\n    ib-loopback:\n      statistics: mean\n      categories: RDMA\n      metrics:\n        - ib-loopback/IB_write_8388608_Avg_\\d+\n      aggregate: ib-loopback/IB_write_.*_Avg_(\\d+)\n")),(0,i.yg)("p",null,"This rule file describes the rules used for the result summary."),(0,i.yg)("p",null,"They are organized by the rule name and each rule mainly includes several elements:"),(0,i.yg)("h4",{id:"metrics"},(0,i.yg)("inlineCode",{parentName:"h4"},"metrics")),(0,i.yg)("p",null,"The list of metrics for this rule. Each metric is in the format of ${benchmark_name}/regex, you can use regex after the first '/', but to be noticed, the benchmark name can not be a regex."),(0,i.yg)("h4",{id:"categories"},(0,i.yg)("inlineCode",{parentName:"h4"},"categories")),(0,i.yg)("p",null,"User-defined category name in string belongs to the rule, which is used to classify and organize the metrics."),(0,i.yg)("h4",{id:"aggregate"},(0,i.yg)("inlineCode",{parentName:"h4"},"aggregate")),(0,i.yg)("p",null,"This item is used to determine whether to aggregate the benchmark results from multiple devices to treat them as one collection.\nFor example, aggregate the results of kernel-launch overhead from 8 GPU devices into one collection."),(0,i.yg)("p",null,"The value of this item should be bool or pattern string with regex\u200b:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"bool:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"False"),"(default): if no aggregation."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"True"),": aggregate the results of multiple ranks. In detail, the metric names in ",(0,i.yg)("inlineCode",{parentName:"li"},"metrics")," like 'metric:","\\","d+' will be aggregated and turned into 'metric' for most microbenchmark metrics."))),(0,i.yg)("li",{parentName:"ul"},"pattern string with regex: aggregate the results using the pattern string, which is used to match the metric names in ",(0,i.yg)("inlineCode",{parentName:"li"},"metrics"),". In detail, the part of the metric that matches the contents of () in the pattern string will be turned into *, other parts of the metric remain unchanged.")),(0,i.yg)("h4",{id:"statistics"},(0,i.yg)("inlineCode",{parentName:"h4"},"statistics")),(0,i.yg)("p",null,"A list of statistical functions is used for this rule to get the results statistics from multiple nodes/ranks."),(0,i.yg)("p",null,"The following illustrates all statistical functions:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"count")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"max")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"mean")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"min")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"p${value}"),": ${value} can be 1-99. For example, p50, p90, etc."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"std"))),(0,i.yg)("h2",{id:"output"},"Output"),(0,i.yg)("p",null,"We support different output formats for result sumamry including markdown, html, etc.\nThe output includes the metrics grouped by category and their values obtained by applying statistical methods to all raw results."))}p.isMDXComponent=!0}}]);