name: Build Image

on:
  push:
    branches:
    - main
    - release/*
  pull_request:
    branches:
    - main
    - release/*
  release:
    types:
    - published
  workflow_dispatch:

jobs:
  docker:
    name: Docker build ${{ matrix.name }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
        - name: cuda11.1.1
          tags: superbench/main:cuda11.1.1,superbench/superbench:latest
        - name: rocm5.1.1-pytorch1.10.0
          tags: superbench/main:rocm5.1.1-pytorch1.10.0
        - name: rocm5.0.1-pytorch1.9.0
          tags: superbench/main:rocm5.0.1-pytorch1.9.0
        - name: rocm5.0-pytorch1.9.0
          tags: superbench/main:rocm5.0-pytorch1.9.0
        - name: rocm4.2-pytorch1.7.0
          tags: superbench/main:rocm4.2-pytorch1.7.0
        - name: rocm4.0-pytorch1.7.0
          tags: superbench/main:rocm4.0-pytorch1.7.0
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Free disk space
        run: |
          mkdir /tmp/emptydir
          for dir in /usr/share/dotnet /usr/local/lib/android /opt/ghc; do
            sudo rsync -a --delete /tmp/emptydir/ ${dir}
          done
          sudo apt-get clean
          df -h
      - name: Prepare metadata
        id: metadata
        run: |
          TAGS=${{ matrix.tags }}
          if [[ "${{ github.event_name }}" == "push" ]] && [[ "${{ github.ref }}" == "refs/heads/release/"* ]]; then
            TAGS=$(sed "s/main:/release:${GITHUB_REF##*/}-/g" <<< ${TAGS})
          fi
          if [[ "${{ github.event_name }}" == "pull_request" ]] && [[ "${{ github.base_ref }}" == "release/"* ]]; then
            TAGS=$(sed "s/main:/release:${GITHUB_BASE_REF##*/}-/g" <<< ${TAGS})
          fi
          if [[ "${{ github.event_name }}" == "release" ]]; then
            TAGS=$(sed "s/main:/superbench:${GITHUB_REF##*/}-/g" <<< ${TAGS})
            GHCR_TAG=$(cut -d, -f1 <<< ${TAGS} | sed "s#superbench/superbench#ghcr.io/${{ github.repository }}/superbench#g")
            TAGS="${TAGS},${GHCR_TAG}"
          fi
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAGS=$(sed "s/main:/dev:/g" <<< ${TAGS})
          fi
          DOCKERFILE=dockerfile/${{ matrix.name }}.dockerfile

          CACHE_FROM="type=registry,ref=$(cut -d, -f1 <<< ${TAGS})"
          CACHE_TO=""
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            CACHE_TO="type=inline,mode=max"
          fi

          echo ::set-output name=dockerfile::${DOCKERFILE}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=cache_from::${CACHE_FROM}
          echo ::set-output name=cache_to::${CACHE_TO}
      - name: Echo image tag
        run: echo ${{ steps.metadata.outputs.tags }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        if: ${{ github.event_name != 'pull_request' }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to the GitHub Container Registry
        uses: docker/login-action@v1
        if: ${{ github.event_name == 'release' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64
          context: .
          file: ${{ steps.metadata.outputs.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.metadata.outputs.tags }}
          cache-from: ${{ steps.metadata.outputs.cache_from }}
          cache-to: ${{ steps.metadata.outputs.cache_to }}
          build-args: |
            NUM_MAKE_JOBS=8
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ github.event.repository.pushed_at }}
            org.opencontainers.image.revision=${{ github.sha }}
      - name: Echo image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
